- const domainQuery = isSANB(ctx.query.domain) && (validator.isIP(ctx.query.domain) || isFQDN(ctx.query.domain)) ? ctx.query.domain : false;
- const isUbuntu = domain && domain.plan === "team" && domain.has_txt_record && config.ubuntuTeamMapping && Object.keys(config.ubuntuTeamMapping).includes(domain.name);
if alias
  input(type="hidden", name="_method", value="PUT")
.form-row
  .form-group(class=domain ? "col" : "col col-md-6")
    label(for="input-alias-name")
      = t("Name")
      = " "
      span.text-danger= t("(required)")
    .input-group
      .input-group-prepend
        button.generate-random-alias.btn.btn-dark.border-themed(
          data-target="#input-alias-name",
          type="button",
          data-toggle="tooltip",
          title=t("Generate random alias")
        )
          i.fa.fa-dice
      input#input-alias-name.form-control.border-themed(
        required,
        readonly=isUbuntu && domain.group !== "admin",
        value=alias ? alias.name : domain && domain.aliases && domain.aliases.length === 0 && isSANB(ctx.query.q) ? striptags(ctx.query.q).split("@")[0].toLowerCase().trim() : "",
        name="name",
        autocomplete=config.env === "test" ? "off" : randomstring(),
        placeholder="",
        autocorrect="off",
        spellcheck="false",
        autocapitalize="off",
        type="text"
      )
      .input-group-append
        .input-group-text.bg-dark.text-white.border-themed
          if domain
            input(type="hidden", name="domain", required, value=domain.id)
            = `@${domain.name}`
          else
            i.fa.fa-at
      if domain
        .input-group-append
          button.btn.btn-success(type="submit")
            if alias
              = t("Update Alias")
            else
              = t("Create Alias")
    ul.list-inline
      li.list-inline-item.small.text-black.text-themed-50= t('Use an asterisk "*" for a catch-all alias.')
      if !domain || !domain.is_global
        li.list-inline-item.small.text-black.text-themed-50!= t('We also support <a href="%s" target="_blank">regular expressions</a>.', l("/faq#do-you-support-regular-expressions-or-regex"))
  if !domain
    .form-group.col-md-6
      label(for="select-alias-domain")
        = t("Domain Name")
      .input-group
        select#select-alias-domain.form-control(required, name="domain")
          each domain, i in allDomains || domains
            option(
              value=domain.id,
              selected=domainQuery && domainQuery === domain.name
            )
              = domain.name
              if !domain.plan || domain.plan === 'free'
                = " "
                = "("
                if user.plan === 'free'
                  = t("Upgrade plan")
                else
                  = t("Switch domain plan")
                = ")"
              if domain.is_global
                = " ("
                = t("Vanity Domain")
                = ")"
        .input-group-append
          button.btn.btn-success(type="submit")
            if alias
              = t("Update Alias")
            else
              = t("Create Alias")
      ul.list-inline.form-text
        if user.plan === 'free'
          li.list-inline-item
            a.btn.btn-sm.btn-danger(
              href=domainQuery ? l(`/my-account/domains/${domainQuery}/billing?plan=enhanced_protection`) : l("/my-account/billing/upgrade?plan=enhanced_protection")
            )
              i.fa.fa-angle-double-up
              = " "
              = t("Upgrade plan")
        li.list-inline-item
          a.btn.btn-sm.btn-dark(
            href=l("/my-account/domains/new"),
            role="button",
            data-toggle="modal-anchor",
            data-target="#modal-domain"
          )
            i.fa.fa-plus
            = " "
            = t("Add new domain")
if !domain || !domain.is_global && (!isUbuntu || domain.group === 'admin')
  .form-group
    = t("IMAP Storage")
    = " "
    span.text-muted= t("(optional)")
  .alert.alert-success
    .form-check.text-left.small
      input#input-has-imap.form-check-input(
        type="checkbox",
        name="has_imap",
        checked=alias ? alias.has_imap : false,
        value="true"
      )
      label.form-check-label(for="input-has-imap")
        = t("This will enable our new IMAP storage feature for this alias.")
        = " "
        = t("You can have both IMAP storage and forwarding recipients enabled at the same time.")
        = " "
        != t('If you would like to learn more about our new IMAP storage feature, please <a class="alert-link" href="%s" target="_blank">click here to read our deep dive on Encrypted Email.</a>', l("/blog/docs/best-quantum-safe-encrypted-email-service"))
.form-group
  label(for="textarea-alias-recipients")
    = t("Forwarding Recipients")
    = " "
    span.text-muted= t("(optional)")
  textarea#textarea-alias-recipients.form-control(name="recipients", rows=1)= alias && Array.isArray(alias.recipients) ? alias.recipients.join(", ") : user.email
  p.form-text.small.text-black.text-themed-50
    if alias
      = t('Recipients must be a line-break/space/comma separated list of valid email addresses, fully-qualified domain names ("FQDN"), IP addresses, and/or webhook URL\'s.  We will automatically remove duplicate entries for you and perform validation when you click "Update Alias" below.')
    else
      = t('Recipients must be a line-break/space/comma separated list of valid email addresses, fully-qualified domain names ("FQDN"), IP addresses, and/or webhook URL\'s.  We will automatically remove duplicate entries for you and perform validation when you click "Create Alias" below.')
    = " "
    = t("We do not support forwarding recursively more than one level deep. If you forward recursively more than one level deep, then your desired configuration may not work as intended.")
.form-group
  label(for="textarea-alias-description")
    = t("Description")
    = " "
    span.text-muted= "(optional)"
  textarea#textarea-alias-description.form-control(
    name="description",
    maxlength=150,
    rows=1
  )= alias ? alias.description : ""
  p.form-text.small.text-black.text-themed-50= t("Description has a max of 150 characters.")
.form-group
  label(for="input-alias-labels")
    = t("Labels")
    = " "
    span.text-muted= "(optional; for organization purposes only)"
  textarea#input-alias-labels.form-control(name="labels", rows=1)= alias && Array.isArray(alias.labels) ? _.without(alias.labels, "catch-all").join(", ") : ""
  p.form-text.small.text-black.text-themed-50= t("Labels must be a line-break/space/comma separated list with a maximum of 20 characters per label.")
if !domain || (domain && !domain.is_global)
  .form-group.form-check
    input#input-has-recipient-verification.form-check-input(
      type="checkbox",
      name="has_recipient_verification",
      value="true",
      checked=alias ? alias.has_recipient_verification : domain && domain.has_recipient_verification
    )
    label.form-check-label(for="input-has-recipient-verification")= t("Requires recipients to click email verification link")
    p.form-text.small.text-black.text-themed-50= t("If you check this, then each forwarding recipient will be required to click an email verification link in order for emails to flow through.")
.form-group.form-check
  input#input-is-enabled.form-check-input(
    type="checkbox",
    name="is_enabled",
    value="true",
    checked=alias ? alias.is_enabled : true
  )
  label.form-check-label(for="input-is-enabled")= t("Active")
  p.form-text.small.text-black.text-themed-50= t("If you uncheck this, then this email will be deactivated and no emails will flow through.  However emails will NOT bounce until this alias is completely deleted.")
if !domain || !domain.is_global
  .form-group.form-check
    input#input-has-pgp.form-check-input(
      type="checkbox",
      name="has_pgp",
      value="true",
      checked=alias ? alias.has_pgp : false
    )
    label.form-check-label(for="input-has-pgp")
      = t("OpenPGP for IMAP Storage")
      = " "
      span.text-muted= t("(optional)")
      = " "
      span.badge.badge-success= t("New")
    p.form-text.small.text-black.text-themed-50= t("Our IMAP Storage service is already encrypted using ChaCha20-Poly1305 encryption.  However if you'd like double the level of encryption, then if you have IMAP Storage enabled and if you also check this, then all future email stored will also be encrypted with the public key below.")
  label(for="textarea-public-key")
    = t('End-to-end Encryption ("E2EE")')
    = " "
    span.text-muted= t("(optional)")
    = " "
    span.badge.badge-success= t("New")
  p.form-text.small.text-black.text-themed-50
    != t('Please enter your optional OpenPGP public key below in ASCII Armor format. This feature enables you to use end-to-end encryption ("E2EE") with <a href="%s" target="_blank">supported email clients</a> and recipients.', l("/faq#do-you-support-openpgpmime-end-to-end-encryption-e2ee-and-web-key-directory-wkd"))
    = " "
    != t('<strong class="text-decoration-underline">This assumes you have already <a href="%s" target="_blank">followed our instructions</a></strong> and <a href="https://keys.openpgp.org/upload" target="_blank">uploaded your public key to the keys.openpgp.org server</a> (or are self-hosting).', l("/faq#do-you-support-openpgpmime-end-to-end-encryption-e2ee-and-web-key-directory-wkd"))
  ul.list-inline.mb-3
    li.list-inline-item
      a.btn.btn-success.btn-sm(
        href=l("/faq#do-you-support-openpgpmime-end-to-end-encryption-e2ee-and-web-key-directory-wkd"),
        target="_blank"
      )= t("Learn more")
    li.list-inline-item
      a.btn.btn-primary.btn-sm(
        href="/.well-known/openpgpkey/hu/mxqp8ogw4jfq83a58pn1wy1ccc1cx3f5.txt",
        target="_blank"
      )= t("View Example")
  .form-group
    textarea#textarea-public-key.form-control(name="public_key", rows=3)= alias && alias.public_key ? alias.public_key : ""
